create schema transient_types;
set search_path='transient_types';
-- prepare a distributed table
create table t as select i as id from generate_series(1,8) i; 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
-- test row
select row(), row(1, 2), row(1, 'a', 'abc', 1.5) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
 row |  row  |      row      
-----+-------+---------------
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
(8 rows)

-- test function
create or replace function foo(in int, out int, out int) as
$$
select $1, $1;
$$ language sql;
select row(id, 1), foo(id) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
  row  |  foo  
-------+-------
 (7,1) | (7,7)
 (1,1) | (1,1)
 (3,1) | (3,3)
 (4,1) | (4,4)
 (2,1) | (2,2)
 (5,1) | (5,5)
 (6,1) | (6,6)
 (8,1) | (8,8)
(8 rows)

-- cleanup
drop table t;
drop function foo(int);
-- prepare a distributed table
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
create table t as select i as id from generate_series(1,8) i; 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
-- create type
drop type if exists myudt;
NOTICE:  type "myudt" does not exist, skipping
create type myudt as (i int, c char);
-- test row
select row((1,'a')::myudt), row((2,'b')::myudt, 2) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
    row    |     row     
-----------+-------------
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
(8 rows)

-- test function
create or replace function foo(in int, out int, out myudt) as
$$
select $1, ($1, 't')::myudt;
$$ language sql;
select row(id, 1), foo(id) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
  row  |     foo     
-------+-------------
 (1,1) | (1,"(1,t)")
 (3,1) | (3,"(3,t)")
 (5,1) | (5,"(5,t)")
 (7,1) | (7,"(7,t)")
 (8,1) | (8,"(8,t)")
 (2,1) | (2,"(2,t)")
 (4,1) | (4,"(4,t)")
 (6,1) | (6,"(6,t)")
(8 rows)

--cleanup
drop function foo(int);
drop type myudt;
drop table t;
-- Test when old QE got released, all types will be dispatched to new QE.
-- prepare a distributed table
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
create table t as select i as id from generate_series(1,8) i; 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
-- set QE release timeout 10ms
set gp_vmem_idle_resource_timeout=10;
-- query 1 
select row(), row(1, 2), row(1, 'a', 'abc', 1.5) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
 row |  row  |      row      
-----+-------+---------------
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
(8 rows)

-- sleep 1000ms
select pg_sleep(1);
INFO:  GPORCA failed to produce a plan, falling back to planner
 pg_sleep 
----------
 
(1 row)

-- query 2 
select row(1, 2, 3, 4, 5, 6), row(), row(1, 2, 3, 4, 5), row(1, 2), row(1, 2, 3, 4), row(1, 'a', 'abc', 1.5) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
      row      | row |     row     |  row  |    row    |      row      
---------------+-----+-------------+-------+-----------+---------------
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
(8 rows)

-- Utility statement won't need to dispatch transient types. So QE may have transient type which is not mapped to QD.
-- prepare a distributed table
drop table if exists t;
create table t as select i as id from generate_series(1,8) i; 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
-- 2 types on QD, but not on QE.
select row(1, row(1,2), 3), row(1, 2, 3, 4);
INFO:  GPORCA failed to produce a plan, falling back to planner
      row      |    row    
---------------+-----------
 (1,"(1,2)",3) | (1,2,3,4)
(1 row)

-- 1 another type on both QD and QE, but not mapped since it's not dispatched.
create or replace function foo(in int, out int, out int) as
$$
select $1, $1; 
$$ language sql;
-- dispatch 3 types to QE.
select foo(id) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
CONTEXT:  SQL function "foo" during startup
  foo  
-------
 (2,2)
 (5,5)
 (4,4)
 (6,6)
 (8,8)
 (1,1)
 (3,3)
 (7,7)
(8 rows)

--cleanup
drop function foo(int);
drop table t;
-- prepare a distributed table
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
create table t as select i as id from generate_series(1,8) i; 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
-- commit
begin;
select row(), row(1, 2), row(1, 'a', 'abc', 1.5) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
 row |  row  |      row      
-----+-------+---------------
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
(8 rows)

commit;
-- abort
begin;
select row(), row(1, row(1, 2)), row(1, 2, 3) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
 row |     row     |   row   
-----+-------------+---------
 ()  | (1,"(1,2)") | (1,2,3)
 ()  | (1,"(1,2)") | (1,2,3)
 ()  | (1,"(1,2)") | (1,2,3)
 ()  | (1,"(1,2)") | (1,2,3)
 ()  | (1,"(1,2)") | (1,2,3)
 ()  | (1,"(1,2)") | (1,2,3)
 ()  | (1,"(1,2)") | (1,2,3)
 ()  | (1,"(1,2)") | (1,2,3)
(8 rows)

abort;
-- subtrans
begin;
select row(1, 2) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
  row  
-------
 (1,2)
 (1,2)
 (1,2)
 (1,2)
 (1,2)
 (1,2)
 (1,2)
 (1,2)
(8 rows)

savepoint s1;
select row(1, 2, 3, 'a'), row(1, 2), row(1, 2, 3); 
INFO:  GPORCA failed to produce a plan, falling back to planner
    row    |  row  |   row   
-----------+-------+---------
 (1,2,3,a) | (1,2) | (1,2,3)
(1 row)

select row(1, 'b', 3, 'a'), row(1, 2, 3, 4, 5, 6), row(1, 2, 3, 4) from t; 
INFO:  GPORCA failed to produce a plan, falling back to planner
    row    |      row      |    row    
-----------+---------------+-----------
 (1,b,3,a) | (1,2,3,4,5,6) | (1,2,3,4)
 (1,b,3,a) | (1,2,3,4,5,6) | (1,2,3,4)
 (1,b,3,a) | (1,2,3,4,5,6) | (1,2,3,4)
 (1,b,3,a) | (1,2,3,4,5,6) | (1,2,3,4)
 (1,b,3,a) | (1,2,3,4,5,6) | (1,2,3,4)
 (1,b,3,a) | (1,2,3,4,5,6) | (1,2,3,4)
 (1,b,3,a) | (1,2,3,4,5,6) | (1,2,3,4)
 (1,b,3,a) | (1,2,3,4,5,6) | (1,2,3,4)
(8 rows)

rollback to savepoint s1;
savepoint s2;
select row(), row(1), row(1, 'a'), row(1, 2, 3);
INFO:  GPORCA failed to produce a plan, falling back to planner
 row | row |  row  |   row   
-----+-----+-------+---------
 ()  | (1) | (1,a) | (1,2,3)
(1 row)

rollback to savepoint s2;
select row(), row(1), row('a', 'b'), row(1, 2, 3, 4) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
 row | row |  row  |    row    
-----+-----+-------+-----------
 ()  | (1) | (a,b) | (1,2,3,4)
 ()  | (1) | (a,b) | (1,2,3,4)
 ()  | (1) | (a,b) | (1,2,3,4)
 ()  | (1) | (a,b) | (1,2,3,4)
 ()  | (1) | (a,b) | (1,2,3,4)
 ()  | (1) | (a,b) | (1,2,3,4)
 ()  | (1) | (a,b) | (1,2,3,4)
 ()  | (1) | (a,b) | (1,2,3,4)
(8 rows)

commit;
-- cleanup
drop table t;
-- prepare a distributed table
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
create table t as select i as id from generate_series(1,100000) i; 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
-- cursor
begin;
declare foo cursor for select row(id, 1),id from t order by id;
INFO:  GPORCA failed to produce a plan, falling back to planner
savepoint x;
fetch from foo;
  row  | id 
-------+----
 (1,1) |  1
(1 row)

rollback to x;
fetch ABSOLUTE 100000 from foo;
    row     |   id   
------------+--------
 (100000,1) | 100000
(1 row)

abort;
truncate table t;
select row(id, 1) from t;
INFO:  GPORCA failed to produce a plan, falling back to planner
 row 
-----
(0 rows)

-- cleanup
drop table t;
-- prepare a distributed table
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
create table t as select i as id from generate_series(1,8) i; 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
create or replace function foo() returns void as $$
begin
    EXECUTE 'SELECT row(id, 2) from t';
    RETURN;
end
$$ language 'plpgsql';
select foo(); 
INFO:  GPORCA failed to produce a plan, falling back to planner
INFO:  GPORCA failed to produce a plan, falling back to planner
CONTEXT:  SQL statement "SELECT row(id, 2) from t"
PL/pgSQL function "foo" line 2 at EXECUTE statement
 foo 
-----
 
(1 row)

-- cleanup
drop function foo();
drop table t;
-- This test case use UDF assign_new_record() to generate a new record type in cache
-- for each tuple, these types should be sync to receiver. 
-- test function
create or replace function assign_new_record()
returns SETOF record as '/Users/oarap/workspace/gpdb/src/test/regress/regress.so',
'assign_new_record' LANGUAGE C VOLATILE;
-- transfer record types via motion incrementally
select assign_new_record() from gp_dist_random('gp_id');
INFO:  GPORCA failed to produce a plan, falling back to planner
 assign_new_record 
-------------------
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
 (1)
(30 rows)

-- cleanup
drop function assign_new_record();
-- Test cases for record type nested in array 
drop table if exists t_array_record;
NOTICE:  table "t_array_record" does not exist, skipping
create table t_array_record as select i as c1, i * 2 as c2 from generate_series(1,10) i;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
select c1, array[row(c1,array[row(2,3),row(c2,5,array[c1],'abc')])] from t_array_record order by c1;
INFO:  GPORCA failed to produce a plan, falling back to planner
 c1 |                        array                         
----+------------------------------------------------------
  1 | {"(1,\"{\"\"(2,3)\"\",\"\"(2,5,{1},abc)\"\"}\")"}
  2 | {"(2,\"{\"\"(2,3)\"\",\"\"(4,5,{2},abc)\"\"}\")"}
  3 | {"(3,\"{\"\"(2,3)\"\",\"\"(6,5,{3},abc)\"\"}\")"}
  4 | {"(4,\"{\"\"(2,3)\"\",\"\"(8,5,{4},abc)\"\"}\")"}
  5 | {"(5,\"{\"\"(2,3)\"\",\"\"(10,5,{5},abc)\"\"}\")"}
  6 | {"(6,\"{\"\"(2,3)\"\",\"\"(12,5,{6},abc)\"\"}\")"}
  7 | {"(7,\"{\"\"(2,3)\"\",\"\"(14,5,{7},abc)\"\"}\")"}
  8 | {"(8,\"{\"\"(2,3)\"\",\"\"(16,5,{8},abc)\"\"}\")"}
  9 | {"(9,\"{\"\"(2,3)\"\",\"\"(18,5,{9},abc)\"\"}\")"}
 10 | {"(10,\"{\"\"(2,3)\"\",\"\"(20,5,{10},abc)\"\"}\")"}
(10 rows)

drop table t_array_record;
-- Test the case that new record type is created during execution stage, which makes
-- QE have more transient types than QD.
drop table if exists t_record_qe;
NOTICE:  table "t_record_qe" does not exist, skipping
create table t_record_qe as select f1 from generate_series(1,10) f1;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
select q from (select max(f1) as max from t_record_qe group by f1 order by f1) q order by max;
INFO:  GPORCA failed to produce a plan, falling back to planner
  q   
------
 (1)
 (2)
 (3)
 (4)
 (5)
 (6)
 (7)
 (8)
 (9)
 (10)
(10 rows)

drop table t_record_qe;
-- Customer reported case which used to segment fault.
DROP TABLE IF EXISTS typemod_init ;
NOTICE:  table "typemod_init" does not exist, skipping
CREATE TABLE typemod_init ( varchar_col character varying(7)); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'varchar_col' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO typemod_init VALUES ('A');
SELECT C FROM ( SELECT B.varchar_col FROM ( SELECT A.varchar_col FROM typemod_init A) B GROUP BY B.varchar_col) C;
INFO:  GPORCA failed to produce a plan, falling back to planner
  c  
-----
 (A)
(1 row)

DROP TABLE typemod_init ;
drop schema transient_types;
